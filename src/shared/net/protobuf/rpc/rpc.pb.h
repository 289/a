// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace shared {
namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class RpcMessage;

enum RpcMessage_MessageType {
  RpcMessage_MessageType_REQUEST = 1,
  RpcMessage_MessageType_RESPONSE = 2,
  RpcMessage_MessageType_ERROR = 3
};
bool RpcMessage_MessageType_IsValid(int value);
const RpcMessage_MessageType RpcMessage_MessageType_MessageType_MIN = RpcMessage_MessageType_REQUEST;
const RpcMessage_MessageType RpcMessage_MessageType_MessageType_MAX = RpcMessage_MessageType_ERROR;
const int RpcMessage_MessageType_MessageType_ARRAYSIZE = RpcMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcMessage_MessageType_descriptor();
inline const ::std::string& RpcMessage_MessageType_Name(RpcMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcMessage_MessageType_descriptor(), value);
}
inline bool RpcMessage_MessageType_Parse(
    const ::std::string& name, RpcMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcMessage_MessageType>(
    RpcMessage_MessageType_descriptor(), name, value);
}
enum RpcMessage_ErrorCode {
  RpcMessage_ErrorCode_NO_ERROR = 0,
  RpcMessage_ErrorCode_WRONG_PROTO = 1,
  RpcMessage_ErrorCode_NO_SERVICE = 2,
  RpcMessage_ErrorCode_NO_METHOD = 3,
  RpcMessage_ErrorCode_INVALID_REQUEST = 4,
  RpcMessage_ErrorCode_INVALID_RESPONSE = 5
};
bool RpcMessage_ErrorCode_IsValid(int value);
const RpcMessage_ErrorCode RpcMessage_ErrorCode_ErrorCode_MIN = RpcMessage_ErrorCode_NO_ERROR;
const RpcMessage_ErrorCode RpcMessage_ErrorCode_ErrorCode_MAX = RpcMessage_ErrorCode_INVALID_RESPONSE;
const int RpcMessage_ErrorCode_ErrorCode_ARRAYSIZE = RpcMessage_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcMessage_ErrorCode_descriptor();
inline const ::std::string& RpcMessage_ErrorCode_Name(RpcMessage_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcMessage_ErrorCode_descriptor(), value);
}
inline bool RpcMessage_ErrorCode_Parse(
    const ::std::string& name, RpcMessage_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcMessage_ErrorCode>(
    RpcMessage_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();
  
  RpcMessage(const RpcMessage& from);
  
  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();
  
  void Swap(RpcMessage* other);
  
  // implements Message ----------------------------------------------
  
  RpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RpcMessage_MessageType MessageType;
  static const MessageType REQUEST = RpcMessage_MessageType_REQUEST;
  static const MessageType RESPONSE = RpcMessage_MessageType_RESPONSE;
  static const MessageType ERROR = RpcMessage_MessageType_ERROR;
  static inline bool MessageType_IsValid(int value) {
    return RpcMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    RpcMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    RpcMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    RpcMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return RpcMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return RpcMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return RpcMessage_MessageType_Parse(name, value);
  }
  
  typedef RpcMessage_ErrorCode ErrorCode;
  static const ErrorCode NO_ERROR = RpcMessage_ErrorCode_NO_ERROR;
  static const ErrorCode WRONG_PROTO = RpcMessage_ErrorCode_WRONG_PROTO;
  static const ErrorCode NO_SERVICE = RpcMessage_ErrorCode_NO_SERVICE;
  static const ErrorCode NO_METHOD = RpcMessage_ErrorCode_NO_METHOD;
  static const ErrorCode INVALID_REQUEST = RpcMessage_ErrorCode_INVALID_REQUEST;
  static const ErrorCode INVALID_RESPONSE = RpcMessage_ErrorCode_INVALID_RESPONSE;
  static inline bool ErrorCode_IsValid(int value) {
    return RpcMessage_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    RpcMessage_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    RpcMessage_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    RpcMessage_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return RpcMessage_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return RpcMessage_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return RpcMessage_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .shared.net.RpcMessage.MessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::shared::net::RpcMessage_MessageType type() const;
  inline void set_type(::shared::net::RpcMessage_MessageType value);
  
  // required fixed64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required fixed64 caller_id = 3;
  inline bool has_caller_id() const;
  inline void clear_caller_id();
  static const int kCallerIdFieldNumber = 3;
  inline ::google::protobuf::uint64 caller_id() const;
  inline void set_caller_id(::google::protobuf::uint64 value);
  
  // required int32 caller_type = 4;
  inline bool has_caller_type() const;
  inline void clear_caller_type();
  static const int kCallerTypeFieldNumber = 4;
  inline ::google::protobuf::int32 caller_type() const;
  inline void set_caller_type(::google::protobuf::int32 value);
  
  // optional string service = 5;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 5;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  
  // optional string method = 6;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 6;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // optional bytes request = 7;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 7;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const void* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  
  // optional bytes response = 8;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 8;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const void* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  
  // optional .shared.net.RpcMessage.ErrorCode error = 9;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 9;
  inline ::shared::net::RpcMessage_ErrorCode error() const;
  inline void set_error(::shared::net::RpcMessage_ErrorCode value);
  
  // @@protoc_insertion_point(class_scope:shared.net.RpcMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_caller_id();
  inline void clear_has_caller_id();
  inline void set_has_caller_type();
  inline void clear_has_caller_type();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_error();
  inline void clear_has_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  int type_;
  ::google::protobuf::int32 caller_type_;
  ::google::protobuf::uint64 caller_id_;
  ::std::string* service_;
  ::std::string* method_;
  ::std::string* request_;
  ::std::string* response_;
  int error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMessage

// required .shared.net.RpcMessage.MessageType type = 1;
inline bool RpcMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::shared::net::RpcMessage_MessageType RpcMessage::type() const {
  return static_cast< ::shared::net::RpcMessage_MessageType >(type_);
}
inline void RpcMessage::set_type(::shared::net::RpcMessage_MessageType value) {
  GOOGLE_DCHECK(::shared::net::RpcMessage_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required fixed64 id = 2;
inline bool RpcMessage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMessage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMessage::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RpcMessage::id() const {
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required fixed64 caller_id = 3;
inline bool RpcMessage::has_caller_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMessage::set_has_caller_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMessage::clear_has_caller_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMessage::clear_caller_id() {
  caller_id_ = GOOGLE_ULONGLONG(0);
  clear_has_caller_id();
}
inline ::google::protobuf::uint64 RpcMessage::caller_id() const {
  return caller_id_;
}
inline void RpcMessage::set_caller_id(::google::protobuf::uint64 value) {
  set_has_caller_id();
  caller_id_ = value;
}

// required int32 caller_type = 4;
inline bool RpcMessage::has_caller_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMessage::set_has_caller_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMessage::clear_has_caller_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMessage::clear_caller_type() {
  caller_type_ = 0;
  clear_has_caller_type();
}
inline ::google::protobuf::int32 RpcMessage::caller_type() const {
  return caller_type_;
}
inline void RpcMessage::set_caller_type(::google::protobuf::int32 value) {
  set_has_caller_type();
  caller_type_ = value;
}

// optional string service = 5;
inline bool RpcMessage::has_service() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMessage::set_has_service() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMessage::clear_has_service() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMessage::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& RpcMessage::service() const {
  return *service_;
}
inline void RpcMessage::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcMessage::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcMessage::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* RpcMessage::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string method = 6;
inline bool RpcMessage::has_method() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMessage::set_has_method() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMessage::clear_has_method() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMessage::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RpcMessage::method() const {
  return *method_;
}
inline void RpcMessage::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMessage::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMessage::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* RpcMessage::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes request = 7;
inline bool RpcMessage::has_request() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpcMessage::set_has_request() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpcMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpcMessage::clear_request() {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& RpcMessage::request() const {
  return *request_;
}
inline void RpcMessage::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void RpcMessage::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void RpcMessage::set_request(const void* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  return request_;
}
inline ::std::string* RpcMessage::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes response = 8;
inline bool RpcMessage::has_response() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RpcMessage::set_has_response() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RpcMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RpcMessage::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& RpcMessage::response() const {
  return *response_;
}
inline void RpcMessage::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void RpcMessage::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void RpcMessage::set_response(const void* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMessage::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* RpcMessage::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .shared.net.RpcMessage.ErrorCode error = 9;
inline bool RpcMessage::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RpcMessage::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RpcMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RpcMessage::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::shared::net::RpcMessage_ErrorCode RpcMessage::error() const {
  return static_cast< ::shared::net::RpcMessage_ErrorCode >(error_);
}
inline void RpcMessage::set_error(::shared::net::RpcMessage_ErrorCode value) {
  GOOGLE_DCHECK(::shared::net::RpcMessage_ErrorCode_IsValid(value));
  set_has_error();
  error_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace shared

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shared::net::RpcMessage_MessageType>() {
  return ::shared::net::RpcMessage_MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shared::net::RpcMessage_ErrorCode>() {
  return ::shared::net::RpcMessage_ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
